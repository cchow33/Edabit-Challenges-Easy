// Create a function that takes a number x and a character y ("m" for male, "f" for female), and returns the name of an ancestor (m/f) or descendant (m/f).
If the number is negative, return the related ancestor.
If positive, return the related descendant.
You are generation 0. In the case of 0 (male or female), return "me!".


// Solution: 1
function generation(number, gender) {
	const familyMembers = {
		'-3': { m: 'great grandfather', f: 'great grandmother' },
		'-2': { m: 'grandfather', f: 'grandmother' },
		'-1': { m: 'father', f: 'mother' },
		 '0': { m: 'me!', f: 'me!'},
		 '1': { m: 'son', f: 'daughter' },
		 '2': { m: 'grandson', f: 'granddaughter' },
		 '3': { m: 'great grandson', f: 'great granddaughter'}
};
  return familyMembers[number][gender]
}

// Solution #2:

function generation(x, y) {
	const familyMembers = {
		'-3': ['great grandfather', 'great grandmother'],
		'-2': ['grandfather', 'grandmother'],
		'-1': ['father', 'mother'],
		 '0': ['me!', 'me!'],
		 '1': ['son', 'daughter'],
		 '2': ['grandson', 'granddaughter'],
		 '3': ['great grandson', 'great granddaughter']
};

  return familyMembers[x][y === 'm' ? 0 : 1]

}

console.log(generation(2, "f"))
console.log(generation(-3, "m")) 
console.log(generation(1, "f")) 

